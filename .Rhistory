num<-15.34^2/8+18.23^2/21
num<-(15.34^2/8+18.23^2/21)^2
den<-15.34^4/8^2/7 + 18.23^4/21^2/20
mydf<-num/den
qt
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
swirl()
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(3)
myplot(30)
myplot(28)
z<-qnorm(.95)
pnorm(30+z, mean=30, lower.tail = FALSE)
pnorm(30+z, mean=32, lower.tail = FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail = FALSE)
pnorm(30+z, mean=32, sd=2, lower.tail = FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail = FALSE)
power.t.test(n=16, delta=2/4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n=16, delta=2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n=16, delta=100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta=2/4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta=2/4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta=2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta=100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues, 'bonferroni')>0.05)
sum(p.adjust(pValues, 'bonferroni')<0.05)
sum(p.adjust(pValues, 'BH')<0.05)
tail(trueStatus)
table(pValues2<0.05, trueStatus)
24/1000
24/500
table(p.adjust(pValues2, "bonferroni")<0.05, trueStatus)
table(p.adjust(pValues2, "BH")<0.05, trueStatus)
swirl()
3.5
print(g2)
head(sh)
nh
meadian(resampledMedians)
median(resampledMedians)
median(sh)
sam<-sample(fh, nh*B, replace=TRUE)
resam<-matrix(sam, nrows=B, ncol = nh)
resam<-matrix(sam, nrow=B, ncol = nh)
apply(resam,1,median)
meds<-apply(resam,1,median)
median(fh)-median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(0.025, 97.5))
quantile(resampledMedians, c(0.025, .975))
quantile(meds, c(0.025, .975))
dim(InsectSprays)
names(InsectSprays)
range(BData$count)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs<-testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1 : 10000,
| function(i) testStat(BCcounts, sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms)
mean(perms>obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
clear()
setwd("~/Documents/Programming/statinference-01")
hist(rexp(n = 1000))
?rexp
library(ggplot)
library(ggplot2)
ggplot(data = data.frame(d=rexp(1000), aes(x=d))) + geom_histogram()
ggplot(data = data.frame(d=rexp(1000)), aes(x=d))) + geom_histogram()
ggplot(data = data.frame(d=rexp(1000)), aes(x=d)) + geom_histogram()
rexp(10)
ggplot(data = data.frame(d=rexp(1000)), aes(x=d)) + geom_histogram(binwidth = 0.5)
ggplot(data = data.frame(d=rexp(1000)), aes(x=d)) + geom_histogram(binwidth = 0.05)
ggplot(data = data.frame(d=rexp(100000)), aes(x=d)) + geom_histogram(binwidth = 0.05)
ggplot(data = data.frame(d=rexp(100000)), aes(x=d)) + geom_histogram(binwidth = 0.1)
ggplot(data = data.frame(d=rexp(1000000)), aes(x=d)) + geom_histogram(binwidth = 0.1)
ggplot(data = data.frame(d=rexp(1000000)), aes(x=d)) + geom_histogram(binwidth = 0.05)
ggplot(data = data.frame(d=rexp(1000000)), aes(x=d)) + geom_histogram(binwidth = 0.01)
ggplot(data = data.frame(d=rexp(1000000)), aes(x=d, colour="Blue")) + geom_histogram(binwidth = 0.01)
ggplot(data = data.frame(d=rexp(1000000)), aes(x=d, fill="Blue")) + geom_histogram(binwidth = 0.01)
ggplot(data = data.frame(d=rexp(1000000)), aes(x=d, fill="Population")) + geom_histogram(binwidth = 0.01)
ggplot(data = data.frame(d=rexp(1000000)), aes(x=d, fill="Population")) + geom_density()
ggplot(data = data.frame(d=rexp(1000)), aes(x=d, fill="Population")) + geom_density()
ggplot(data = data.frame(d=rexp(10000)), aes(x=d, fill="Population")) + geom_density()
ggplot(data = data.frame(d=rexp(100000)), aes(x=d, fill="Population")) + geom_density()
ggplot(data = data.frame(d=rexp(100000, 0.2)), aes(x=d, fill="Population")) +
geom_density(aes(fill='blue'))
ggplot(data = data.frame(d=rexp(100000, 0.2)), aes(x=d, fill="Population")) +
geom_density(fill='blue')
sample_means<-NULL
for (i in 1 : 1000) sample_means = c(mns, mean(rexp(40, 0.2)))
for (i in 1 : 1000) sample_means = c(sample_means, mean(rexp(40, 0.2)))
hist(sample_means)
for (i in 1 : 100000) sample_means = c(sample_means, mean(rexp(40, 0.2)))
hist(sample_means)
var(sample_means)
sd(sample_means)
sqrt(sd(sample_means))
sd(sample_means)^2
25/sqrt(40)
sd(sample_means)
sample_means<-NULL
sample_vars<-NULL
for (i in 1 : 1000) sample_means = c(sample_means, mean(rexp(40, 0.2)))
for (i in 1 : 1000) sample_vars = c(sample_vars, mean(rexp(40, 0.2)))
sample_means<-NULL
sample_vars<-NULL
for (i in 1 : 1000) sample_means = c(sample_means, mean(rexp(40, 0.2)))
for (i in 1 : 1000) sample_vars = c(sample_vars, var(rexp(40, 0.2)))
mean(sample_vars)
sd(sample_means)
5/sqrt(40)
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 1000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_density(aes(x=SampleMeans), fill='orange') +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 100000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_density(aes(x=SampleMeans), fill='orange') +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 100000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_density(aes(x=SampleMeans), fill='orange') +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 100000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_histogram(aes(x=SampleMeans), fill='orange') +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 100000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_histogram(aes(x=SampleMeans/1000), fill='orange') +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 100000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_histogram(aes(x=SampleMeans, y=..density..), fill='orange') +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 100000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_histogram(aes(x=SampleMeans, y=..density..), fill='red') +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 100000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_histogram(aes(x=SampleMeans, y=..density..), fill='darkred') +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 100000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_histogram(aes(x=SampleMeans, y=..density..), fill='darkred', binwidth=0.2) +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means), aes()) +
geom_histogram(aes(x=SampleMeans, y=..density..), fill='darkred', binwidth=0.2) +
stat_function(fun=dnorm, mean=5, sd=(5/sqrt(40))^2)
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 100000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_histogram(aes(x=SampleMeans, y=..density..), fill='darkred', binwidth=0.2) +
geom_density(aes(x=NormalDensity), colour="black") +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
ggplot(data = data.frame(SampleMeans = sample_means, NormalDensity=rnorm(n = 1000000, mean = 5, sd = (5/sqrt(40))^2)), aes()) +
geom_histogram(aes(x=SampleMeans, y=..density..), fill='darkred', binwidth=0.2) +
geom_density(aes(x=NormalDensity), colour="black", weight=2) +
ggtitle("Actual Distributions of Means and Normal Distribution") +
xlab("X")+
ylab("Density")+
theme_bw()
sd(sample_means)
sd(sample_means)/sqrt(40)
5/sqrt(40)
40*sd(sample_means)^2
??ToothGrowth
ToothGrowth
data("ToothGrowth")
Summary(ToothGrowth)
summary(ToothGrowth)
plot(x = ToothGrowth$dose, y=ToothGrowth$len)
boxplot(ToothGrowth[ToothGrowth$supp = "OC","len"], ToothGrowth[ToothGrowth$supp = "VC","len"])
boxplot(ToothGrowth[ToothGrowth$supp == "OC","len"], ToothGrowth[ToothGrowth$supp == "VC","len"])
boxplot(len~dose, data = ToothGrowth)
boxplot(len~supp, data = ToothGrowth)
library(ggplot2)
ggplot(ToothGrowth, aes(len, dose)) + geom_boxplot() + theme_bw()
ggplot(ToothGrowth, aes(len, supp)) + geom_boxplot() + theme_bw()
ggplot(ToothGrowth, aes(supp, len)) + geom_boxplot() + theme_bw()
hist(ToothGrowth$len)
hist(ToothGrowth$lenggplot(ToothGrowth, aes(len)) +
geom_hist(binwidth = 0.5) +
ggtitle("Tooth length data")+
xlab("Tooth Length")+
ylab("Count") +
theme_bw())
ggplot(ToothGrowth, aes(len)) +
geom_hist(binwidth = 0.5) +
ggtitle("Tooth length data")+
xlab("Tooth Length")+
ylab("Count") +
theme_bw()
ggplot(ToothGrowth, aes(len)) +
geom_histogram(binwidth = 0.5) +
ggtitle("Tooth length data")+
xlab("Tooth Length")+
ylab("Count") +
theme_bw()
ggplot(ToothGrowth, aes(len)) +
geom_histogram(binwidth = 1, fill="darkblue") +
ggtitle("Tooth length data")+
xlab("Tooth Length")+
ylab("Count") +
theme_bw()
ggplot(ToothGrowth, aes(len)) +
geom_histogram(binwidth = 2, fill="darkblue") +
ggtitle("Tooth length data")+
xlab("Tooth Length")+
ylab("Count") +
theme_bw()
ggplot(ToothGrowth, aes(len)) +
geom_histogram(binwidth = 1, fill="darkblue") +
ggtitle("Tooth length data")+
xlab("Tooth Length")+
ylab("Count") +
theme_bw()
p1<-ggplot(ToothGrowth, aes(supp, len, colour=supp)) +
geom_boxplot() +
ggtitle("Tooth length data by supplement type")+
xlab("Supplement")+
ylab("Tooth Length") +
theme_bw()
p1
p1<-ggplot(ToothGrowth, aes(supp, len, fill=supp)) +
geom_boxplot() +
ggtitle("Tooth length data by supplement type")+
xlab("Supplement")+
ylab("Tooth Length") +
theme_bw()
p1
p1<-ggplot(ToothGrowth, aes(dose, len, fill=supp)) +
geom_boxplot() +
ggtitle("Tooth length data by supplement type")+
xlab("Supplement")+
ylab("Tooth Length") +
theme_bw()
p1
p1<-ggplot(ToothGrowth, aes(dose, len)) +
geom_boxplot() +
ggtitle("Tooth length data by supplement type")+
xlab("Supplement")+
ylab("Tooth Length") +
theme_bw()
p1
p1<-ggplot(ToothGrowth, aes(as.factor(dose), len, fill=supp)) +
geom_boxplot() +
ggtitle("Tooth length data by supplement type")+
xlab("Supplement")+
ylab("Tooth Length") +
theme_bw()
p1
ggplot(ToothGrowth, aes(as.factor(dose), len, fill = supp)) +
geom_boxplot() +
ggtitle("Tooth length data by supplement type and dose")+
legend() +
xlab("Dose")+
ylab("Tooth Length") +
guides(fill=guide_legend(title="Supplement")) +
theme_bw()
ggplot(ToothGrowth, aes(as.factor(dose), len, fill = supp)) +
geom_boxplot() +
ggtitle("Tooth length data by supplement type and dose")+
legend() +
xlab("Dose")+
ylab("Tooth Length") +
scale_fill_discrete(name="Supplement") +
theme_bw()
ggplot(ToothGrowth, aes(as.factor(dose), len, fill = supp)) +
geom_boxplot() +
ggtitle("Tooth length data by supplement type and dose")+
xlab("Dose")+
ylab("Tooth Length") +
guides(fill=guide_legend(title="Supplement")) +
theme_bw()
anova(ToothGrowth)
?anova
g<-glm(len~dose, ToothGrowth)
g
g<-lm(len~dose, ToothGrowth, )
g
t.test(ToothGrowth[ToothGrowth$dose == 0.5,"len"], ToothGrowth[ToothGrowth$dose == 1, "len"], paired=FALSE)
g1 <- ToothGrowth[ToothGrowth$dose == 0.5]$len
g1 <- ToothGrowth[ToothGrowth$dose == 0.5,]$len
diff<-g2-g1
g1 <- ToothGrowth[ToothGrowth$dose == 0.5,]$len
g2 <- ToothGrowth[ToothGrowth$dose == 1, ]$len
g3 <- ToothGrowth[ToothGrowth$dose == 2, ]$len
diff<-g2-g1
mn<-mean(diff)
s <- sd(diff)
n <- 15
t.test(diff)
t.test(diff)$conf
t.test(g2,g1)
t.test(g2,g1)$conf[1]
t.test(g2,g1)$conf[1:2]
t.test(g2,g1)$conf
t.test(g2,g1)$conf[1:2]
tt1<-t.test(g2, g1)$conf[1:2]
tt2<-t.test(g3, g2)$conf[1:2]
tt3<-t.test(g3, g1)$conf[1:2]
tt1
tt2
tt3
matrix(c(tt1, tt2, tt3), ncol=2)
matrix(c(tt1, tt2, tt3), ncol=2, dimnames = list(c("0.5 to 1 mg", "1 to 2 mg", "0.5 to 2 mg"), c("Low CI", "High CI")))
kable(matrix(c(tt1, tt2, tt3), ncol=2, dimnames = list(c("0.5 to 1 mg", "1 to 2 mg", "0.5 to 2 mg"), c("Low CI", "High CI"))))
library(rmarkdown)
kable(matrix(c(tt1, tt2, tt3), ncol=2, dimnames = list(c("0.5 to 1 mg", "1 to 2 mg", "0.5 to 2 mg"), c("Low CI", "High CI"))))
library(knitr)
kable(matrix(c(tt1, tt2, tt3), ncol=2, dimnames = list(c("0.5 to 1 mg", "1 to 2 mg", "0.5 to 2 mg"), c("Low CI", "High CI"))))
InsectSprays
g1
g1 <- ToothGrowth[ToothGrowth$dose == 0.5,]
g2 <- ToothGrowth[ToothGrowth$dose == 1, ]
g3 <- ToothGrowth[ToothGrowth$dose == 2, ]
tt1<-t.test(g2$len, g1$len)$conf[1:2]
tt2<-t.test(g3$len, g2$len)$conf[1:2]
tt3<-t.test(g3$len, g1$len)$conf[1:2]
len1<-g1$len
len2<-g2$len
len3<-g3$len
g1$supp
g2$supp
g3$supp
len1<-g1$len; len2<-g2$len; len3<-g3$len
group<-as.character(g1$supp) #same for g2 and g3
testStat<-function(w, g) mean(w[g=="OJ"])-mean(w[g=="VC"])
observed1<-teststat(len1, group)
observed2<-teststat(len2, group)
observed3<-teststat(len3, group)
perm1<-sapply(1:10000, function(i) testStat(len1, sample(group)))
perm1<-sapply(1:10000, function(i) testStat(len2, sample(group)))
perm1<-sapply(1:10000, function(i) testStat(len3, sample(group)))
len1<-g1$len; len2<-g2$len; len3<-g3$len
group<-as.character(g1$supp) #same for g2 and g3
testStat<-function(w, g) mean(w[g=="OJ"])-mean(w[g=="VC"])
observed1<-testStat(len1, group)
observed2<-testStat(len2, group)
observed3<-testStat(len3, group)
perm1<-sapply(1:10000, function(i) testStat(len1, sample(group)))
perm1<-sapply(1:10000, function(i) testStat(len2, sample(group)))
perm1<-sapply(1:10000, function(i) testStat(len3, sample(group)))
len1<-g1$len; len2<-g2$len; len3<-g3$len
group<-as.character(g1$supp) #same for g2 and g3
testStat<-function(w, g) mean(w[g=="OJ"])-mean(w[g=="VC"])
observed1<-testStat(len1, group)
observed2<-testStat(len2, group)
observed3<-testStat(len3, group)
perm1<-sapply(1:10000, function(i) testStat(len1, sample(group)))
perm2<-sapply(1:10000, function(i) testStat(len2, sample(group)))
perm3<-sapply(1:10000, function(i) testStat(len3, sample(group)))
mean(perm1>obs1)
mean(perm1>observed1)
observed1
mean(perm2>observed2)
observed2
observed3
mean(perm3>observed3)
mean(perm2>observed2)
r observed3
observed3
mean(perm3>observed3)
unlink('statproj02-inferentialanalysis_cache', recursive = TRUE)
install.packages(c("backports", "chron", "digest", "fastmatch", "htmlTable", "Matrix", "nlme", "Rcpp", "rprojroot", "tabplot", "xml2"))
install.packages(c("backports", "chron", "digest", "fastmatch", "htmlTable", "Matrix", "nlme", "Rcpp", "rprojroot", "tabplot", "xml2"))
b1<-c(140,138,150,148,135)
b2<-c(132, 135, 151, 146, 130)
t.test(b2,b1,alternative = 'two.sided', paired = TRUE)
n=9
u=1100
s=3-
s=30
sqrt(n)*(1080)/30
sqrt(n)*(1080-1100)/30
sqrt(n)*(1081-1100)/30
qt(.975, 8)
sqrt(n)*(1077-1100)/30
(1*2)/sd(c(1,1,1,0))
rbinom
?rbinom
qbinom(3,4)
qbinom(3,4, 0.5)
pbinom(3,4, 0.5)
pbinom(3,4)
pbinom(3,4,.5)
pbinom(4,4,.5)
pbinom(1,4,.5)
pbinom(3,4,.5, lower.tail = FALSE)
pbinom(2,4,.5, lower.tail = FALSE)
ppois(10, 1787)
ppois(10, 1787, lower.tail=FALSE)
10/1787
r<-10/1787
10/1787
*100
r*100
ppois(r*100, 1, lower.tail=FALSE)
ppois(10/1787, 1/100)
ppois(10/1787, 1/100, lower.tail = FALSE)
ppois(1/100, 10/1787, lower.tail = FALSE)
ppois(1/100, 10/1787)
x1=-3
x2=1
s1=1.5
s2=1.8
n1=n2=9
(x1-x2-(-3))/sqrt(s1/n1+s2/n2)
(x1-x2-(3))/sqrt(s1/n1+s2/n2)
sqrt(s1/n1+s2/n2)
sqrt(s1+s2)
sqrt(s1+s2)*sqrt(1/n1+1/n2)
sqrt(s1+s2)*sqrt(1/n1+1/n2)
((sqrt((s1+s2)/2)*sqrt(1/n1+1/n2))
sqrt((s1+s2)/2)*sqrt(1/n1+1/n2)
1--3(-3)/sqrt((s1+s2)/2)*sqrt(1/n1+1/n2)
(1-(-3)-(-3))/sqrt((s1+s2)/2)*sqrt(1/n1+1/n2)
s<-sqrt((s1+s2)/2)
-4*sqrt(18)/s
mu0=0
mua=-.01
sigma=sqrt(.04)
z=qnorm(1-.05)
pnorm(mu0 + z * sigma/sqrt(n), mean=mu0, sd=sigma/sqrt(n), lower.tail=FALSE)
n=120
pnorm(mu0 + z * sigma/sqrt(n), mean=mu0, sd=sigma/sqrt(n), lower.tail=FALSE)
n=140
pnorm(mu0 + z * sigma/sqrt(n), mean=mu0, sd=sigma/sqrt(n), lower.tail=FALSE)
n=NULL
pnorm(mu0 + z * sigma/sqrt(n), mean=mu0, sd=sigma/sqrt(n), lower.tail=FALSE)
n=1460
pnorm(mu0 + z * sigma/sqrt(n), mean=mu0, sd=sigma/sqrt(n), lower.tail=FALSE)
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=FALSE)
n=120
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=FALSE)
n=140
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=FALSE)
n=160
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=FALSE)
n=180
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=FALSE)
z=qnorm(1-.1)
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=FALSE)
n=120
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=FALSE)
power.t.test(delta=0.01, sd = .04, sig.level = .05, power = .9, alternative = 'one')
power.t.test(delta=0.01, sd = .04, sig.level = .05, power = .9, alternative = 'one')
power.t.test(n=100, delta=0.01, sd = .04, sig.level = .05, alternative = 'one')
power.t.test(delta=0.01, sd = .04, sig.level = .05, power = .9, alternative = 'one', type='one')
power.t.test(delta=0.01, sd = .04, sig.level = .05, n=100, alternative = 'one', type='one')
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
t.test(paired=FALSE, var.equal=TRUE)
t.test(paired=FALSE, var.equal=TRUE)
sp<-((n1-1)*s1 + (n2-1)*s2)/(n1+n2-2)
(x1-x2-(x1-0))/(sp*sqrt(1/n1 + 1/n2))
st<-(x1-x2-(x1-0))/(sp*sqrt(1/n1 + 1/n2))
